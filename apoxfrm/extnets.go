package main

import (
	"strings"

	"github.com/mitchellh/mapstructure"
	"go.uber.org/zap"

	"go.aporeto.io/gaia"
)

func xfrmExtNets(file string, extnets, extraextnets []map[string]interface{}) (extnetList gaia.ExternalNetworksList, xextnets []map[string]interface{}) {

	for i, e := range append(extraextnets, extnets...) {

		extnet := gaia.NewExternalNetwork()
		if err := mapstructure.Decode(e, extnet); err != nil {
			panic(err)
		}

		if extnet.Type != gaia.ExternalNetworkTypeSubnet {
			panic("unhandled external network type")
		}

		extnetList = append(extnetList, extnet)

		// Process the external network - Create a v2 copy, add suffix to name, remove protocol and ports
		v2extnet := extnet.DeepCopy()
		v2extnet.Name = v2extnet.Name + migrationSuffix
		v2extnet.ServicePorts = []string{}
		associatedTags := []string{}
		foundAssociatedTag := "(missing)"
		for _, t := range v2extnet.AssociatedTags {
			if strings.HasPrefix(t, extnetPrefix) {
				t = t + migrationSuffix
				foundAssociatedTag = extnetPrefix
			}
			associatedTags = append(associatedTags, t)
		}
		v2extnet.AssociatedTags = associatedTags

		zap.L().Info(
			"External Network",
			zap.String("file", file),
			zap.String("ns", extnet.Namespace),
			zap.String("name", extnet.Name),
			zap.Strings("ports", extnet.ServicePorts),
			zap.String("tag", foundAssociatedTag),
		)

		// Dont export extra external networks
		if i >= len(extraextnets) {

			xe := map[string]interface{}{}
			if err := mapstructure.Decode(v2extnet, &xe); err != nil {
				panic(err)
			}

			for k, v := range xe {
				keySpec := extnet.SpecificationForAttribute(strings.ToLower(k))
				if !keySpec.Exposed || keySpec.ReadOnly || keySpec.Autogenerated || v == keySpec.DefaultValue {
					delete(xe, k)
				}
			}

			xextnets = append(xextnets, xe)
		}
	}
	return
}
